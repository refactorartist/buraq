---
description: 
globs: 
alwaysApply: false
---
# Rust Async Web Development Guide

## Project Setup and Workflow

### Development Commands

- Run tests: `devbox run test`
- Start application: `devbox run start`

### Prerequisites

- Rust
- Tokio
- Actix-web
- MongoDB
- Devbox

## Project Structure

```
project_root/
|
|= src/
|     |
|     main.rs
|     lib.rs
|    | routes/
|     models/
|     repositories/
|     services/
|
|= tests/
|    | integration/
|    | unit/
|
|= Cargo.toml
|=> devbox.json
```

## Devbox Configuration

```json
{
  "packages": [
    "rust",
    "mongodb",
    "openssl"
  ],
  "shell": {
    "init_hook": [
      "export RUST_BACKTRACE=3
  L  }
  },
  "scripts": {
    "test": "cargo test -- --nocapture",
    "start": "cargo run",
    "check": "cargo check",
    "clippy": "cargo clippy"
  }
}
```

## Testing Workflow

### Run All Tests
```bash
devbox run tests
```

### Run Specific Test Module
```bash
devbox run tests -- --test integration_tests
```

### Run with Verbose Output
```bash
devbox run tests -- --nocapture
```

## Key Development Principles

### Async Programming
- Use `tokio` for async runtime
- Implement async functions with `async fn`
- Leverage `tokio::spawn` for concurrency

### Error Handling
- Use `Result` for fallible operations
- Implement comprehensive error types
- Provide meaningful error messages

### Database Interactions
- Use `mongodb` with async support
- Implement repository pattern
- Use connection pooling
- Leverage `serde` for serialization

## Recommended Ecosystem

- HTTP Server: Actix-web
- Database: MongoDB
- Serialization: Serde
- Logging: Tracing
- Configuration: Config crate

## Performance Optimization

- Minimize async overhead
- Implement connection pooling
- Optimize database queries
- Use efficient serialization

## Security Considerations

- Input validation
- Secure MongoDB connections
- Implement authentication
- Use HTTPS
- Protect against web vulnerabilities

## Best Practices

1. Modular application structure
2. Clear separation of concerns
3. Comprehensive logging
4. Environment-based configuration
5. Thorough testing

## Continuous Integration

Ensure all tests pass:
```bash
devbox run tests
```

Start application:
```bash
devbox run start
tests
```

## Contributing

1. Fork the repository
2. Create your feature branch
3. Commit your changes
4. Push to the branch
5. Create a new Pull Request

## License

[Your License Here]